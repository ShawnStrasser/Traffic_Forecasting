guides(colour = "none") +
labs(y="% change")
us_change %>%
GGally::ggpairs(columns = 2:6)
fit_consMR <- us_change %>%
model(tslm = TSLM(Consumption ~ Income + Production +
Unemployment + Savings))
report(fit_consMR)
augment(fit_consMR) %>%
ggplot(aes(x = Quarter)) +
geom_line(aes(y = Consumption, colour = "Data")) +
geom_line(aes(y = .fitted, colour = "Fitted")) +
labs(y = NULL,
title = "Percent change in US consumption expenditure"
) +
scale_colour_manual(values=c(Data="black",Fitted="#D55E00")) +
guides(colour = guide_legend(title = NULL))
augment(fit_consMR) %>%
ggplot(aes(x = Consumption, y = .fitted)) +
geom_point() +
labs(
y = "Fitted (predicted values)",
x = "Data (actual values)",
title = "Percent change in US consumption expenditure"
) +
geom_abline(intercept = 0, slope = 1)
fit_consMR %>% gg_tsresiduals()
us_change %>%
left_join(residuals(fit_consMR), by = "Quarter") %>%
pivot_longer(Income:Unemployment,
names_to = "regressor", values_to = "x") %>%
ggplot(aes(x = x, y = .resid)) +
geom_point() +
facet_wrap(. ~ regressor, scales = "free_x") +
labs(y = "Residuals", x = "")
augment(fit_consMR) %>%
ggplot(aes(x = .fitted, y = .resid)) +
geom_point() + labs(x = "Fitted", y = "Residuals")
fit <- aus_airpassengers %>%
filter(Year <= 2011) %>%
left_join(guinea_rice, by = "Year") %>%
model(TSLM(Passengers ~ Production))
report(fit)
recent_production <- aus_production %>%
filter(year(Quarter) >= 1992)
recent_production %>%
autoplot(Beer) +
labs(y = "Megalitres",
title = "Australian quarterly beer production")
fit_beer <- recent_production %>%
model(TSLM(Beer ~ trend() + season()))
report(fit_beer)
augment(fit_beer) %>%
ggplot(aes(x = Quarter)) +
geom_line(aes(y = Beer, colour = "Data")) +
geom_line(aes(y = .fitted, colour = "Fitted")) +
scale_colour_manual(
values = c(Data = "black", Fitted = "#D55E00")
) +
labs(y = "Megalitres",
title = "Australian quarterly beer production") +
guides(colour = guide_legend(title = "Series"))
augment(fit_beer) %>%
ggplot(aes(x = Beer, y = .fitted,
colour = factor(quarter(Quarter)))) +
geom_point() +
labs(y = "Fitted", x = "Actual values",
title = "Australian quarterly beer production") +
geom_abline(intercept = 0, slope = 1) +
guides(colour = guide_legend(title = "Quarter"))
fourier_beer <- recent_production %>%
model(TSLM(Beer ~ trend() + fourier(K = 2)))
report(fourier_beer)
ARIMA(y ~ x + pdq(1,1,0))
us_change %>%
pivot_longer(c(Consumption, Income),
names_to = "var", values_to = "value") %>%
ggplot(aes(x = Quarter, y = value)) +
geom_line() +
facet_grid(vars(var), scales = "free_y") +
labs(title = "US consumption and personal income",
y = "Quarterly % change")
fit <- us_change %>%
model(ARIMA(Consumption ~ Income))
report(fit)
bind_rows(
`Regression residuals` =
as_tibble(residuals(fit, type = "regression")),
`ARIMA residuals` =
as_tibble(residuals(fit, type = "innovation")),
.id = "type"
) %>%
mutate(
type = factor(type, levels=c(
"Regression residuals", "ARIMA residuals"))
) %>%
ggplot(aes(x = Quarter, y = .resid)) +
geom_line() +
facet_grid(vars(type))
fit %>% gg_tsresiduals()
augment(fit) %>%
features(.innov, ljung_box, dof = 5, lag = 8)
us_change_future <- new_data(us_change, 8) %>%
mutate(Income = mean(us_change$Income))
forecast(fit, new_data = us_change_future) %>%
autoplot(us_change) +
labs(y = "Percentage change")
vic_elec_daily <- vic_elec %>%
filter(year(Time) == 2014) %>%
index_by(Date = date(Time)) %>%
summarise(
Demand = sum(Demand) / 1e3,
Temperature = max(Temperature),
Holiday = any(Holiday)
) %>%
mutate(Day_Type = case_when(
Holiday ~ "Holiday",
wday(Date) %in% 2:6 ~ "Weekday",
TRUE ~ "Weekend"
))
vic_elec_daily %>%
ggplot(aes(x = Temperature, y = Demand, colour = Day_Type)) +
geom_point() +
labs(y = "Electricity demand (GW)",
x = "Maximum daily temperature")
vic_elec_daily %>%
pivot_longer(c(Demand, Temperature)) %>%
ggplot(aes(x = Date, y = value)) +
geom_line() +
facet_grid(name ~ ., scales = "free_y") + ylab("")
fit <- vic_elec_daily %>%
model(ARIMA(Demand ~ Temperature + I(Temperature^2) +
(Day_Type == "Weekday")))
fit %>% gg_tsresiduals()
augment(fit) %>%
features(.innov, ljung_box, dof = 9, lag = 14)
vic_elec_future <- new_data(vic_elec_daily, 14) %>%
mutate(
Temperature = 26,
Holiday = c(TRUE, rep(FALSE, 13)),
Day_Type = case_when(
Holiday ~ "Holiday",
wday(Date) %in% 2:6 ~ "Weekday",
TRUE ~ "Weekend"
)
)
forecast(fit, vic_elec_future) %>%
autoplot(vic_elec_daily) +
labs(title="Daily electricity demand: Victoria",
y="GW")
knitr::opts_chunk$set(echo = TRUE, messsage = FALSE, warning = FALSE)
library(tsibble)
library(tidyverse)
library(tsibbledata)
library(forecast)
library(fpp3)
library(fable)
library(dplyr)
fit <- prison_gts %>%
filter(year(Quarter) <= 2014) %>%
model(base = ETS(Count)) %>%
reconcile(
bottom_up = bottom_up(base),
MinT = min_trace(base, method = "mint_shrink")
)
tourism <- tsibble::tourism %>%
mutate(State = recode(State,
`New South Wales` = "NSW",
`Northern Territory` = "NT",
`Queensland` = "QLD",
`South Australia` = "SA",
`Tasmania` = "TAS",
`Victoria` = "VIC",
`Western Australia` = "WA"
))
tourism_hts <- tourism %>%
aggregate_key(State / Region, Trips = sum(Trips))
tourism_hts
tourism_hts %>%
filter(is_aggregated(Region)) %>%
autoplot(Trips) +
labs(y = "Trips ('000)",
title = "Australian tourism: national and states") +
facet_wrap(vars(State), scales = "free_y", ncol = 3) +
theme(legend.position = "none")
prison <- readr::read_csv("https://OTexts.com/fpp3/extrafiles/prison_population.csv") %>%
mutate(Quarter = yearquarter(Date)) %>%
select(-Date)  %>%
as_tsibble(key = c(Gender, Legal, State, Indigenous),
index = Quarter) %>%
relocate(Quarter)
prison_gts <- prison %>%
aggregate_key(Gender * Legal * State, Count = sum(Count)/1e3)
prison_gts %>%
filter(!is_aggregated(Gender), is_aggregated(Legal),
is_aggregated(State)) %>%
autoplot(Count) +
labs(y = "Number of prisoners ('000)")
prison_gts %>%
filter(!is_aggregated(Gender), !is_aggregated(Legal),
!is_aggregated(State)) %>%
mutate(Gender = as.character(Gender)) %>%
ggplot(aes(x = Quarter, y = Count,
group = Gender, colour=Gender)) +
stat_summary(fun = sum, geom = "line") +
labs(title = "Prison population by state and gender",
y = "Number of prisoners ('000)") +
facet_wrap(~ as.character(State),
nrow = 1, scales = "free_y") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
tourism_full <- tourism %>%
aggregate_key((State/Region) * Purpose, Trips = sum(Trips))
tourism_states <- tourism %>%
aggregate_key(State, Trips = sum(Trips))
fcasts_state <- tourism_states %>%
filter(!is_aggregated(State)) %>%
model(ets = ETS(Trips)) %>%
forecast()
# Sum bottom-level forecasts to get top-level forecasts
fcasts_national <- fcasts_state %>%
summarise(value = sum(Trips), .mean = mean(value))
tourism_states %>%
model(ets = ETS(Trips)) %>%
reconcile(bu = bottom_up(ets)) %>%
forecast()
tourism_full <- tourism %>%
aggregate_key((State/Region) * Purpose, Trips = sum(Trips))
fit <- tourism_full %>%
filter(year(Quarter) <= 2015) %>%
model(base = ETS(Trips)) %>%
reconcile(
bu = bottom_up(base),
ols = min_trace(base, method = "ols"),
mint = min_trace(base, method = "mint_shrink"),
)
fc <- fit %>% forecast(h = "2 years")
fc %>%
filter(is_aggregated(Region), is_aggregated(Purpose)) %>%
autoplot(
tourism_full %>% filter(year(Quarter) >= 2011),
level = NULL
) +
labs(y = "Trips ('000)") +
facet_wrap(vars(State), scales = "free_y")
fc %>%
filter(is_aggregated(State), !is_aggregated(Purpose)) %>%
autoplot(
tourism_full %>% filter(year(Quarter) >= 2011),
level = NULL
) +
labs(y = "Trips ('000')") +
facet_wrap(vars(Purpose), scales = "free_y")
fc %>%
filter(is_aggregated(State), is_aggregated(Purpose)) %>%
accuracy(
data = tourism_full,
measures = list(rmse = RMSE, mase = MASE)
) %>%
group_by(.model) %>%
summarise(rmse = mean(rmse), mase = mean(mase))
fit <- prison_gts %>%
filter(year(Quarter) <= 2014) %>%
model(base = ETS(Count)) %>%
reconcile(
bottom_up = bottom_up(base),
MinT = min_trace(base, method = "mint_shrink")
)
fc <- fit %>% forecast(h = 8)
fc %>%
filter(is_aggregated(State), is_aggregated(Gender),
is_aggregated(Legal)) %>%
autoplot(prison_gts, alpha = 0.7, level = 90) +
labs(y = "Number of prisoners ('000)",
title = "Australian prison population (total)")
fc %>%
filter(
.model %in% c("base", "MinT"),
!is_aggregated(State), is_aggregated(Legal),
is_aggregated(Gender)
) %>%
autoplot(
prison_gts %>% filter(year(Quarter) >= 2010),
alpha = 0.7, level = 90
) +
labs(title = "Prison population (by state)",
y = "Number of prisoners ('000)") +
facet_wrap(vars(State), scales = "free_y", ncol = 4) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
fc %>%
filter(is_aggregated(State), is_aggregated(Gender),
is_aggregated(Legal)) %>%
accuracy(data = prison_gts,
measures = list(mase = MASE,
ss = skill_score(CRPS)
)
) %>%
group_by(.model) %>%
summarise(mase = mean(mase), sspc = mean(ss) * 100)
View(global_economy)
knitr::opts_chunk$set(echo = TRUE, messsage = FALSE, warning = FALSE)
library(tsibble)
library(tidyverse)
library(tsibbledata)
library(forecast)
library(fpp3)
library(fable)
library(dplyr)
library(Mcomp)
knitr::opts_chunk$set(echo = TRUE, messsage = FALSE, warning = FALSE)
library(tsibble)
library(tidyverse)
library(tsibbledata)
library(forecast)
library(fpp3)
library(fable)
library(dplyr)
library(Mcomp)
dataset <- read_parquet("volumes_traveltime.parquet") %>%
filter(Phase %in% c(2,6)) %>%
as_tsibble(index = TimeStamp, key = c("TSSU", "Phase"))
knitr::opts_chunk$set(echo = TRUE, messsage = FALSE, warning = FALSE)
library(fpp3)
library(imputeTS)
library(arrow)
install.packages("arrow")
knitr::opts_chunk$set(echo = TRUE, messsage = FALSE, warning = FALSE)
library(fpp3)
library(imputeTS)
dataset <- read_parquet("volumes_traveltime.parquet") %>%
filter(Phase %in% c(2,6)) %>%
as_tsibble(index = TimeStamp, key = c("TSSU", "Phase"))
library(arrow)
knitr::opts_chunk$set(echo = TRUE, messsage = FALSE, warning = FALSE)
library(fpp3)
library(imputeTS)
library(arrow)
dataset <- read_parquet("volumes_traveltime.parquet") %>%
filter(Phase %in% c(2,6)) %>%
as_tsibble(index = TimeStamp, key = c("TSSU", "Phase"))
dataset <- read_parquet("volumes_traveltime.parquet") %>%
filter(Phase %in% c(2,6)) %>%
as_tsibble(index = TimeStamp, key = c("TSSU", "Phase"))
dataset
knitr::opts_chunk$set(echo = TRUE, messsage = FALSE, warning = FALSE)
library(tsibble)
library(tidyverse)
library(tsibbledata)
library(forecast)
library(fpp3)
library(fable)
library(dplyr)
library(Mcomp)
fit <- us_change %>%
model(
aicc = VAR(vars(Consumption, Income)),
bic = VAR(vars(Consumption, Income), ic = "bic")
)
fit
glance(fit)
fit %>%
augment() %>%
ACF(.innov) %>%
autoplot()
fit %>%
select(aicc) %>%
forecast() %>%
autoplot(us_change %>% filter(year(Quarter) > 2010))
knitr::opts_chunk$set(echo = TRUE)
library(tidyquant)
library(fpp3)
library(tseries)
library(rugarch)
library(data.table)
library(plotly)
library(readr)
HSI <- readr::read_csv("HSI.csv",
col_types = cols(
Date = col_date(format = "%m/%d/%y"),
Open = col_double(),
High = col_double(),
Low = col_double(),
Close = col_double(),
`Adj Close` = col_double(),
Volume = col_double()
))
HSI <- HSI %>%
tsibble(index = Date) %>%
mutate(Return = difference(log(HSI$Close)) * 100)
HSI <- HSI %>%
na.omit() %>%
mutate(time = row_number()) %>%
update_tsibble(index = time)
head(HSI)
HSI %>%
ggplot(aes(x = Date, y = Close)) +
geom_line() +
theme_tq() +
labs(title = "HSI Index (date data)")
HSI %>%
ggplot(aes(x = Date, y = Return)) +
geom_line() +
theme_tq() +
labs(title = "HSI Return (date data)")
HSI%>%features(Return,unitroot_kpss)
adf.test(HSI$Return, alternative = "stationary")
arima.mod <- HSI %>%
model(ARIMA(Return, stepwise = FALSE, approximation = FALSE))
arima.mod
arima.mod$`ARIMA(Return, stepwise = FALSE, approximation = FALSE)`
arima.mod%>%
gg_tsresiduals()
augment(arima.mod)%>%features(.innov,ljung_box)
p1 <- arima.mod %>%
augment() %>%
select(.innov) %>%
ACF(.innov ^ 2) %>%
autoplot() +
labs(y = "resid^2  acf")
p2 <- arima.mod %>%
augment() %>%
select(.innov) %>%
PACF(.innov ^ 2) %>%
autoplot() +
labs(y = "resid^2  pacf")
gridExtra::grid.arrange(p1, p2)
spec <-
ugarchspec(
variance.model = list(
model = "sGARCH",
garchOrder = c(1, 1),
submodel = NULL,
external.regressors = NULL,
variance.targeting = FALSE
),
mean.model = list(armaOrder = c(2, 3),
include.mean = TRUE),
# fixed.pars = list("omega" = 0.2, "alpha1" = 0.2,
#                                  "beta1" = 0.2),
distribution.model = "sged"
)
show(spec)
fit <- ugarchfit(spec, HSI$Return, optim.control = list(maxit = 1000),
solver = "hybrid")
print(fit)
fit <- ugarchfit(spec, HSI$Return, optim.control = list(maxit = 1000),
solver = "hybrid")
print(fit)
fore <- function(input, p, q, n) {
spec <-
ugarchspec(
variance.model = list(
model = "sGARCH",
garchOrder = c(1, 1),
submodel = NULL,
external.regressors = NULL,
variance.targeting = FALSE
),
mean.model = list(armaOrder = c(p, q),
include.mean = TRUE),
distribution.model = "sged"
)
fit <- ugarchfit(spec, input$Return,
solver = "hybrid")
fore <- ugarchforecast(fit, n.ahead = n)
pred <- fore@forecast$seriesFor
pred <- as.data.table(pred)
setnames(pred, "Return")
pred[, time := seq.int(from = 1, to = n, by = 1)][]
}
pred <- fore(HSI, 2, 3, 10)
#View the predictions
pred
test <- readr::read_csv("test.csv",
col_types = cols(
Date = col_date(format = "%m/%d/%y"),
Open = col_double(),
High = col_double(),
Low = col_double(),
Close = col_double(),
`Adj Close` = col_double(),
Volume = col_double()
))
test <- test %>%
tsibble(index = Date) %>%
mutate(Return = difference(log(test$Close)) * 100)
test <- test %>%
na.omit() %>%
mutate(time = row_number()) %>%
update_tsibble(index = time)
# Preview the test data
head(test, 5)
foretest <- function(pred, test) {
p <- pred %>%
tsibble(index = time) %>%
left_join(test, by = "time") %>%
mutate(Pred = Return.x,
Actual = Return.y) %>%
select(time, Date, Close, Pred, Actual) %>%
pivot_longer(
cols = c(Pred, Actual),
values_to = "Return",
names_to = "Type"
) %>%
ggplot(aes(x = Date, y = Return, color = Type)) +
geom_line() +
scale_x_date(date_minor_breaks = "1 day") +
ggsci::scale_color_aaas()+
labs(title = "10 Trading Days Forecast")
ggplotly(p)
}
foretest(pred, test)
shiny::runApp('GitHub/Traffic_Forecasting/Traffic_Forecasting')
